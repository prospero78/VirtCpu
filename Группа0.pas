unit Группа0;
(*

Выполняет регистровые операции по группе 0000.

========= Операции по группе 0000 ( 2 ) ========
$0 -- пересылка из ист в наз
$1 -- сложение из ист в наз
$2 -- вычитание из ист в наз
$3 -- умножение из ист в наз
$4 -- деление из ист в наз
$5 -- лог И из ист в наз
$6 -- лог ИЛИ из ист в наз
$7 -- лог НЕ из ист в наз
$8 -- лог НИЛИ из ист в наз (XOR)
$9 -- сравн ист и наз
$A -- поменять местами наз и ист
$B -- 
$C --
$D --
$E --
$F -- 

*)
interface
uses Рон;

implementation
/// получить источник-регистр из кода операции
function Ист_Получ(код_:integer):integer;
var
   /// регистр-источник
   ист:integer;
begin
   ист:=код_ and $F0;
   ист:= ист shl 4; 
   result:=ист;
end;
/// получить регистр-назначение из кода операции
function Назн_Получ(код_:integer):integer;
var
   /// регистр-назаначение
   назн:integer;
begin
   назн:=код_ and $F;
   result:=назн;
end;
/// получить команду-селектор для работы с регистрами
function Сел_Получ(код_:integer):integer;
var
   /// команда-селектор
   сел:integer;
begin
   сел:=код_ and $F00;
   сел:= сел shl 8;
   result:=сел;
end;
/// пересылка из источника в назначение (код команды $0)
procedure Пересыл_Ист_в_Назн(var ист, назн:integer);
begin
   Рон.рег[назн]:=Рон.рег[ист];
end;
/// сложение из источника в назначение (код команды $1)
procedure Слож_Ист_в_Назн(var ист, назн:integer);
begin
   Рон.рег[назн] += Рон.рег[ист];
end;
/// Вычитание из источника в назначение (код команды $2)
procedure Вычит_Ист_в_Назн(var ист, назн:integer);
begin
   Рон.рег[назн] := Рон.рег[ист] - Рон.рег[назн];
end;
/// Умножение из источника в назначение (код команды $3)
procedure Умнож_Ист_в_Наз(var ист, назн:integer);
begin
   Рон.рег[назн] := Рон.рег[ист] * Рон.рег[назн];
end;


/// Процедура выбора кода операции над регистрами
procedure Селектор00(код_: integer);
var
   /// регистр-источник
   ист:integer;
   /// регистр-назначение
   назн:integer;
   /// селектор -- что делать с регистрами
   сел:integer;
begin
   ист := Ист_Получ(код_);
   назн := Назн_Получ(код_);
   сел := Сел_Получ(код_);
   case сел of
      $0: Пересыл_Ист_в_Назн(ист, назн); (* пересылка из ист в наз *)
      $1: Слож_Ист_в_Назн(ист, назн); (* сложение из ист в наз *)
      $2: Вычит_Ист_в_Назн(ист, назн); (* вычитание из ист в наз *)
      $3: Умнож_Ист_в_Наз(ист, назн); (* умножение из ист в наз *)
      $4: ; (* деление из ист в наз *)
      $5: ; (* лог И из ист в наз *)
      $6: ; (* лог ИЛИ из ист в наз *)
      $7: ; (* лог НЕ из ист в наз *)
      $8: ; (* сравн ист и наз *)
      $9: ; (* сравн ист и наз *)
      $A: ; (* поменять местами наз и ист *)
      $B: ; (*  *)
      $C: ; (*  *)
      $D: ; (*  *)
      $E: ; (*  *)
      $F:   ;(*  *)
   else
      print('VirtCpu.DLL: proc Селектор00() -- неизвестный селектор:' + сел);
   end;
end;
end.